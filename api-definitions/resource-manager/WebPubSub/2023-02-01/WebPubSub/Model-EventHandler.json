{
 "name": "EventHandler",
 "fields": [
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "auth",
   "name": "Auth",
   "objectDefinition": {
    "type": "Reference",
    "referenceName": "UpstreamAuthSettings"
   },
   "optional": true,
   "required": false,
   "description": ""
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "systemEvents",
   "name": "SystemEvents",
   "objectDefinition": {
    "type": "List",
    "referenceName": null,
    "nestedItem": {
     "type": "String",
     "referenceName": null
    }
   },
   "optional": true,
   "required": false,
   "description": "Gets or sets the list of system events."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "urlTemplate",
   "name": "UrlTemplate",
   "objectDefinition": {
    "type": "String",
    "referenceName": null
   },
   "optional": false,
   "required": true,
   "description": "Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.\r\nFor example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "userEventPattern",
   "name": "UserEventPattern",
   "objectDefinition": {
    "type": "String",
    "referenceName": null
   },
   "optional": true,
   "required": false,
   "description": "Gets or sets the matching pattern for event names.\r\nThere are 3 kinds of patterns supported:\r\n    1. \"*\", it matches any event name\r\n    2. Combine multiple events with \",\", for example \"event1,event2\", it matches event \"event1\" and \"event2\"\r\n    3. A single event name, for example, \"event1\", it matches \"event1\""
  }
 ]
}