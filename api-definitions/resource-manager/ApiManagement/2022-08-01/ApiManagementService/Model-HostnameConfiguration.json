{
 "name": "HostnameConfiguration",
 "fields": [
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "certificate",
   "name": "Certificate",
   "objectDefinition": {
    "type": "Reference",
    "referenceName": "CertificateInformation"
   },
   "optional": true,
   "required": false,
   "description": "Certificate information."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "certificatePassword",
   "name": "CertificatePassword",
   "objectDefinition": {
    "type": "String",
    "referenceName": null
   },
   "optional": true,
   "required": false,
   "description": "Certificate Password."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "certificateSource",
   "name": "CertificateSource",
   "objectDefinition": {
    "type": "Reference",
    "referenceName": "CertificateSource"
   },
   "optional": true,
   "required": false,
   "description": "Certificate Source."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "certificateStatus",
   "name": "CertificateStatus",
   "objectDefinition": {
    "type": "Reference",
    "referenceName": "CertificateStatus"
   },
   "optional": true,
   "required": false,
   "description": "Certificate Status."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "defaultSslBinding",
   "name": "DefaultSslBinding",
   "objectDefinition": {
    "type": "Boolean",
    "referenceName": null
   },
   "optional": true,
   "required": false,
   "description": "Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to gateway Hostname Type."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "encodedCertificate",
   "name": "EncodedCertificate",
   "objectDefinition": {
    "type": "String",
    "referenceName": null
   },
   "optional": true,
   "required": false,
   "description": "Base64 Encoded certificate."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "hostName",
   "name": "HostName",
   "objectDefinition": {
    "type": "String",
    "referenceName": null
   },
   "optional": false,
   "required": true,
   "description": "Hostname to configure on the Api Management service."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "identityClientId",
   "name": "IdentityClientId",
   "objectDefinition": {
    "type": "String",
    "referenceName": null
   },
   "optional": true,
   "required": false,
   "description": "System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "keyVaultId",
   "name": "KeyVaultId",
   "objectDefinition": {
    "type": "String",
    "referenceName": null
   },
   "optional": true,
   "required": false,
   "description": "Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*"
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "negotiateClientCertificate",
   "name": "NegotiateClientCertificate",
   "objectDefinition": {
    "type": "Boolean",
    "referenceName": null
   },
   "optional": true,
   "required": false,
   "description": "Specify true to always negotiate client certificate on the hostname. Default Value is false."
  },
  {
   "containsDiscriminatedTypeValue": false,
   "jsonName": "type",
   "name": "Type",
   "objectDefinition": {
    "type": "Reference",
    "referenceName": "HostnameType"
   },
   "optional": false,
   "required": true,
   "description": "Hostname type."
  }
 ]
}